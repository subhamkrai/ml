
1. BASIC ARRAY CHARACTERSTICS

import numpy as np
 
# Creating array object
arr = np.array( [[ 1, 2, 3],
                 [ 4, 2, 5]] )
 
# Printing type of arr object
print("Array is of type: ", type(arr))
 
# Printing array dimensions (axes)
print("No. of dimensions: ", arr.ndim)
 
# Printing shape of array
print("Shape of array: ", arr.shape)
 
# Printing size (total number of elements) of array
print("Size of array: ", arr.size)
 
# Printing type of elements in array
print("Array stores elements of type: ", arr.dtype)


OUTPUT:


Array is of type:  
No. of dimensions:  2
Shape of array:  (2, 3)
Size of array:  6
Array stores elements of type:  int64


2. ARRAY CREATION TECHNIQUES


import numpy as np
 
# Creating array from list with type float
a = np.array([[1, 2, 4], [5, 8, 7]], dtype = 'float')
print ("Array created using passed list:\n", a)
 
# Creating array from tuple
b = np.array((1 , 3, 2))
print ("\nArray created using passed tuple:\n", b)
 
# Creating a 3X4 array with all zeros
c = np.zeros((3, 4))
print ("\nAn array initialized with all zeros:\n", c)
 
# Create a constant value array of complex type
d = np.full((3, 3), 6, dtype = 'complex')
print ("\nAn array initialized with all 6s."
            "Array type is complex:\n", d)
 
# Create an array with random values
e = np.random.random((2, 2))
print ("\nA random array:\n", e)
 
# Create a sequence of integers 
# from 0 to 30 with steps of 5
f = np.arange(0, 30, 5)
print ("\nA sequential array with steps of 5:\n", f)
 
# Create a sequence of 10 values in range 0 to 5
g = np.linspace(0, 5, 10)
print ("\nA sequential array with 10 values between"
                                        "0 and 5:\n", g)
 
# Reshaping 3X4 array to 2X2X3 array
arr = np.array([[1, 2, 3, 4],
                [5, 2, 4, 2],
                [1, 2, 0, 1]])
 
newarr = arr.reshape(2, 2, 3)
 
print ("\nOriginal array:\n", arr)
print ("Reshaped array:\n", newarr)
 
# Flatten array
arr = np.array([[1, 2, 3], [4, 5, 6]])
flarr = arr.flatten()
 
print ("\nOriginal array:\n", arr)
print ("Fattened array:\n", flarr)


OUTPUT :

Array created using passed list:
 [[ 1.  2.  4.]
 [ 5.  8.  7.]]

Array created using passed tuple:
 [1 3 2]

An array initialized with all zeros:
 [[ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]]

An array initialized with all 6s. Array type is complex:
 [[ 6.+0.j  6.+0.j  6.+0.j]
 [ 6.+0.j  6.+0.j  6.+0.j]
 [ 6.+0.j  6.+0.j  6.+0.j]]

A random array:
 [[ 0.46829566  0.67079389]
 [ 0.09079849  0.95410464]]

A sequential array with steps of 5:
 [ 0  5 10 15 20 25]

A sequential array with 10 values between 0 and 5:
 [ 0.          0.55555556  1.11111111  1.66666667  2.22222222  2.77777778
  3.33333333  3.88888889  4.44444444  5.        ]

Original array:
 [[1 2 3 4]
 [5 2 4 2]
 [1 2 0 1]]
Reshaped array:
 [[[1 2 3]
  [4 5 2]]

 [[4 2 1]
  [2 0 1]]]

Original array:
 [[1 2 3]
 [4 5 6]]
Fattened array:
 [1 2 3 4 5 6]


3.INDEXING IN NUMPY

import numpy as np
 
# An exemplar array
arr = np.array([[-1, 2, 0, 4],
                [4, -0.5, 6, 0],
                [2.6, 0, 7, 8],
                [3, -7, 4, 2.0]])
 
# Slicing array
temp = arr[:2, ::2]
print ("Array with first 2 rows and alternate"
                    "columns(0 and 2):\n", temp)
 
# Integer array indexing example
temp = arr[[0, 1, 2, 3], [3, 2, 1, 0]]
print ("\nElements at indices (0, 3), (1, 2), (2, 1),"
                                    "(3, 0):\n", temp)
 
# boolean array indexing example
cond = arr > 0 # cond is a boolean array
temp = arr[cond]
print ("\nElements greater than 0:\n", temp)



OUTPUT :

Array with first 2 rows and alternatecolumns(0 and 2):
 [[-1.  0.]
 [ 4.  6.]]

Elements at indices (0, 3), (1, 2), (2, 1),(3, 0):
 [ 4.  6.  0.  3.]

Elements greater than 0:
 [ 2.   4.   4.   6.   2.6  7.   8.   3.   4.   2. ]




4.BASIC OPERATIONS

import numpy as np
 
a = np.array([1, 2, 5, 3])
 
# add 1 to every element
print ("Adding 1 to every element:", a+1)
 
# subtract 3 from each element
print ("Subtracting 3 from each element:", a-3)
 
# multiply each element by 10
print ("Multiplying each element by 10:", a*10)
 
# square each element
print ("Squaring each element:", a**2)
 
# modify existing array
a *= 2
print ("Doubled each element of original array:", a)
 
# transpose of array
a = np.array([[1, 2, 3], [3, 4, 5], [9, 6, 0]])
 
print ("\nOriginal array:\n", a)
print ("Transpose of array:\n", a.T)



OUTPUT :

Adding 1 to every element: [2 3 6 4]
Subtracting 3 from each element: [-2 -1  2  0]
Multiplying each element by 10: [10 20 50 30]
Squaring each element: [ 1  4 25  9]
Doubled each element of original array: [ 2  4 10  6]

Original array:
 [[1 2 3]
 [3 4 5]
 [9 6 0]]
Transpose of array:
 [[1 3 9]
 [2 4 6]
 [3 5 0]]



5.UNIARY OPERATIONS

import numpy as np
 
arr = np.array([[1, 5, 6],
                [4, 7, 2],
                [3, 1, 9]])
 
# maximum element of array
print ("Largest element is:", arr.max())
print ("Row-wise maximum elements:",
                    arr.max(axis = 1))
 
# minimum element of array
print ("Column-wise minimum elements:",
                        arr.min(axis = 0))
 
# sum of array elements
print ("Sum of all array elements:",
                            arr.sum())
 
# cumulative sum along each row
print ("Cumulative sum along each row:\n",
                        arr.cumsum(axis = 1))



OUTPUT :

Largest element is: 9
Row-wise maximum elements: [6 7 9]
Column-wise minimum elements: [1 1 2]
Sum of all array elements: 38
Cumulative sum along each row:
[[ 1  6 12]
 [ 4 11 13]
 [ 3  4 13]]


6.SORTING ARRAY

import numpy as np
 
a = np.array([[1, 4, 2],
                 [3, 4, 6],
              [0, -1, 5]])
 
# sorted array
print ("Array elements in sorted order:\n",
                    np.sort(a, axis = None))
 
# sort array row-wise
print ("Row-wise sorted array:\n",
                np.sort(a, axis = 1))
 
# specify sort algorithm
print ("Column wise sort by applying merge-sort:\n",
            np.sort(a, axis = 0, kind = 'mergesort'))
 
# Example to show sorting of structured array
# set alias names for dtypes
dtypes = [('name', 'S10'), ('grad_year', int), ('cgpa', float)]
 
# Values to be put in array
values = [('Hrithik', 2009, 8.5), ('Ajay', 2008, 8.7), 
           ('Pankaj', 2008, 7.9), ('Aakash', 2009, 9.0)]
            
# Creating array
arr = np.array(values, dtype = dtypes)
print ("\nArray sorted by names:\n",
            np.sort(arr, order = 'name'))
             
print ("Array sorted by grauation year and then cgpa:\n",
                np.sort(arr, order = ['grad_year', 'cgpa']))


OUTPUT:

Array elements in sorted order:
[-1  0  1  2  3  4  4  5  6]
Row-wise sorted array:
[[ 1  2  4]
 [ 3  4  6]
 [-1  0  5]]
Column wise sort by applying merge-sort:
[[ 0 -1  2]
 [ 1  4  5]
 [ 3  4  6]]

Array sorted by names:
[('Aakash', 2009, 9.0) ('Ajay', 2008, 8.7) ('Hrithik', 2009, 8.5)
 ('Pankaj', 2008, 7.9)]
Array sorted by grauation year and then cgpa:
[('Pankaj', 2008, 7.9) ('Ajay', 2008, 8.7) ('Hrithik', 2009, 8.5)
 ('Aakash', 2009, 9.0)]



7.STACKING 

import numpy as np
 
a = np.array([[1, 2],
              [3, 4]])
 
b = np.array([[5, 6],
              [7, 8]])
 
# vertical stacking
print("Vertical stacking:\n", np.vstack((a, b)))
 
# horizontal stacking
print("\nHorizontal stacking:\n", np.hstack((a, b)))
 
c = [5, 6]
 
# stacking columns
print("\nColumn stacking:\n", np.column_stack((a, c)))
 
# concatenation method 
print("\nConcatenating to 2nd axis:\n", np.concatenate((a, b), 1))



OUTPUT:

Vertical stacking:
 [[1 2]
 [3 4]
 [5 6]
 [7 8]]

Horizontal stacking:
 [[1 2 5 6]
 [3 4 7 8]]

Column stacking:
 [[1 2 5]
 [3 4 6]]

Concatenating to 2nd axis:
 [[1 2 5 6]
 [3 4 7 8]]


8.SPLITTING


import numpy as np
 
a = np.array([[1, 3, 5, 7, 9, 11],
              [2, 4, 6, 8, 10, 12]])
 
# horizontal splitting
print("Splitting along horizontal axis into 2 parts:\n", np.hsplit(a, 2))
 
# vertical splitting
print("\nSplitting along vertical axis into 2 parts:\n", np.vsplit(a, 2))


OUTPUT:

Splitting along horizontal axis into 2 parts:
 [array([[1, 3, 5],
       [2, 4, 6]]), array([[ 7,  9, 11],
       [ 8, 10, 12]])]

Splitting along vertical axis into 2 parts:
 [array([[ 1,  3,  5,  7,  9, 11]]), array([[ 2,  4,  6,  8, 10, 12]])]



9.BROADCASTING:  The Broadcasting Rule: In order to broadcast, the size of the trailing axes for both arrays in an operation must either be the same size or one of them must be one


import numpy as np
 
a = np.array([1.0, 2.0, 3.0])
 
# Example 1
b = 2.0
print(a * b)
 
# Example 2
c = [2.0, 2.0, 2.0]
print(a * c)

OUTPUT:

[ 2.  4.  6.]
[ 2.  4.  6.]



import numpy as np
 
a = np.array([0.0, 10.0, 20.0, 30.0])
b = np.array([0.0, 1.0, 2.0])
 
print(a[:, np.newaxis] + b)



OUTPUT:

[[  0.   1.   2.]
 [ 10.  11.  12.]
 [ 20.  21.  22.]
 [ 30.  31.  32.]]




10.WORKING WITH DATETIME



import numpy as np
 
# creating a date
today = np.datetime64('2017-02-12')
print("Date is:", today)
print("Year is:", np.datetime64(today, 'Y'))
 
# creating array of dates in a month
dates = np.arange('2017-02', '2017-03', dtype='datetime64[D]')
print("\nDates of February, 2017:\n", dates)
print("Today is February:", today in dates)
 
# arithmetic operation on dates
dur = np.datetime64('2017-05-22') - np.datetime64('2016-05-22')
print("\nNo. of days:", dur)
print("No. of weeks:", np.timedelta64(dur, 'W'))
 
# sorting dates
a = np.array(['2017-02-12', '2016-10-13', '2019-05-22'], dtype='datetime64')
print("\nDates in sorted order:", np.sort(a))



OUTPUT:

Date is: 2017-02-12
Year is: 2017

Dates of February, 2017:
 ['2017-02-01' '2017-02-02' '2017-02-03' '2017-02-04' '2017-02-05'
 '2017-02-06' '2017-02-07' '2017-02-08' '2017-02-09' '2017-02-10'
 '2017-02-11' '2017-02-12' '2017-02-13' '2017-02-14' '2017-02-15'
 '2017-02-16' '2017-02-17' '2017-02-18' '2017-02-19' '2017-02-20'
 '2017-02-21' '2017-02-22' '2017-02-23' '2017-02-24' '2017-02-25'
 '2017-02-26' '2017-02-27' '2017-02-28']
Today is February: True

No. of days: 365 days
No. of weeks: 52 weeks

Dates in sorted order: ['2016-10-13' '2017-02-12' '2019-05-22']




11.LINEAR ALGEBRA IN NUMPY




import numpy as np
 
A = np.array([[6, 1, 1],
              [4, -2, 5],
              [2, 8, 7]])
 
print("Rank of A:", np.linalg.matrix_rank(A))
 
print("\nTrace of A:", np.trace(A))
 
print("\nDeterminant of A:", np.linalg.det(A))
 
print("\nInverse of A:\n", np.linalg.inv(A))
 
print("\nMatrix A raised to power 3:\n", np.linalg.matrix_power(A, 3))

OUTPUT:

Rank of A: 3

Trace of A: 11

Determinant of A: -306.0

Inverse of A:
 [[ 0.17647059 -0.00326797 -0.02287582]
 [ 0.05882353 -0.13071895  0.08496732]
 [-0.11764706  0.1503268   0.05228758]]

Matrix A raised to power 3:
 [[336 162 228]
 [406 162 469]
 [698 702 905]]


#x + 2*y = 8
#3*x + 4*y = 18
#This problem can be solved using linalg.solve method as shown in example below:

import numpy as np
 
# coefficients
a = np.array([[1, 2], [3, 4]])
# constants
b = np.array([8, 18])
 
print("Solution of linear equations:", np.linalg.solve(a, b))


OUTPUT:

Solution of linear equations: [ 2.  3.]




12.TAKE IN NUMPY


import numpy as geek
 
#array = geek.arange(10).reshape(2, 5)
array = [[5, 6, 2, 7, 1],
         [4, 9, 2, 9, 3]]
print("Original array : \n", array)
 
# indices = [0, 4]
print("\nTaking Indices\n", geek.take(array, [0, 4]))
 
# indices = [0, 4] with axis = 1
print("\nTaking Indices\n", geek.take(array, [0, 4], axis = 1))


OUTPUT :

Original array : 
 [[5, 6, 2, 7, 1], [4, 9, 2, 9, 3]]

Taking Indices
 [5 1]

Taking Indices
 [[5 1]
 [4 3]]



13.EQUAL IN NUMPY



import numpy as geek 
  
a  = geek.equal([1., 2.], [1., 3.])
print("Check to be Equal : \n", a, "\n")
  
b = geek.equal([1, 2], [[1, 3],[1, 4]])
print("Check to be Equal : \n", b, "\n")


OUTPUT :

Check to be Equal : 
 [ True False] 

Check to be Equal : 
 [[ True False]
 [ True False]] 
 


# Python Program illustrating
# numpy.equal() method
import numpy as geek 
  
# Here we will compare Complex values with int
a = geek.array([0 + 1j, 2])
b = geek.array([1,2])
  
d  = geek.equal(a, b)
print("Comparing complex with int using .equal() : ", d)


OUTPUT :

Comparing complex with int using .equal() :  [False  True]
 

# Python Program illustrating
# numpy.not_equal() method
import numpy as geek 
  
# Here we will compare Float with int values
a = geek.array([1.1, 1])
b = geek.array([1, 2])
   
d  = geek.not_equal(a, b)
print("\nComparing float with int using .not_equal() : ", d)

OUTPUT :

Comparing float with int using .not_equal() :  [ True  True]

